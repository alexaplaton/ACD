// ACD CODE 

// -------------------------------------------------------
// Global Variables
// -------------------------------------------------------
// define pins for motors
int rightMotorLogicPin1 = 5;    
int rightMotorLogicPin2 = 6;  
int leftMotorLogicPin1 = 9;    
int leftMotorLogicPin2 = 10; 

// define pin for the ultrasonic sensor
const int sensorTrigPin = 2;
const int sensorEchoPin = 4;  

// define pin for IR sensor
const int IRSensorPin = 11;
const int LEDPin = 13;

// define constants for comparing sensor readings
// you will need to calibrate these values for your setup - the sensors can be affected by ambient light
// the Arduino's analog input will read a value between 0-1023. Higher values mean *less* IR light is reflected (dark surface)

// NEED TO FIND THRESHOLD FOR DETECTING THE CONTAINER //
// const int IRThreshold = 200;   // threshold for right IR sensor to detect container
const int reverseDistance = 5; // Distance detected for vehicle to reverse
const int stoppingDistance = 10; // Distance detected for vehicle to stop

// Defining other non-constant variables used in program
float distance = 0;         // distance measured by the ultrasonic sensor in centimeters
int pwmDutyCycle = 0;

// -------------------------------------------------------
// Subroutine: Initialize Motor Pins
// -------------------------------------------------------
void initializeMotorPins(){
	// Copied from Lab 3 - Solution
  	// Configuration the motor pins
    pinMode(rightMotorLogicPin1, OUTPUT);   
    pinMode(rightMotorLogicPin2, OUTPUT);   
    pinMode(leftMotorLogicPin1, OUTPUT);   
    pinMode(leftMotorLogicPin2, OUTPUT);   

    // Print the motor pin configuration for wiring
    Serial.print("Right Motor Pin 1 = ");
    Serial.println(rightMotorLogicPin1);
    Serial.print("Right Motor Pin 2 = ");
    Serial.println(rightMotorLogicPin2);
    Serial.print("Left Motor Pin 1 = ");
    Serial.println(leftMotorLogicPin1);
    Serial.print("Left Motor Pin 2 = ");
    Serial.println(leftMotorLogicPin2);

    // Initialization completed successfully
    Serial.println("Initialization complete");
}

// -------------------------------------------------------
// Subroutine: Initialize Sensor Pins
// -------------------------------------------------------
void initializeSensorPins(){
	// Copied from Lecture Notes (Week2) - Scans using the HC SR04 ultrasonic sensor 
  // Set up the pins
  pinMode(sensorTrigPin, OUTPUT);
  digitalWrite(sensorTrigPin, LOW);
  pinMode(sensorEchoPin, INPUT);

  // Print the pin configuration for wiring
  Serial.print("sensor Trig Pin = ");
  Serial.println(sensorTrigPin);
  Serial.print("sensor Echo Pin = ");
  Serial.println(sensorEchoPin);

  // Set up IR Sensor pins
  pinMode(IRSensorPin, INPUT);
  pinMode(LEDPin, OUTPUT);

  Serial.print("IR Sensor Pin = ");
  Serial.println(IRSensorPin);
  Serial.print("LED Pin = ");
  Serial.println(LEDPin);

  // Initialization completed successfully
  Serial.println("Initialization complete");
}
  
// -------------------------------------------------------
// Subroutine: Set Motor Pins
// -------------------------------------------------------
void setMotorPins(int currentDirection, int pwmDutyCycle){
  // Adapted from Lab 3 - Solution
  if (currentDirection == 'f') {
      Serial.println("Forwards");
      analogWrite(leftMotorLogicPin1, 0);
      analogWrite(leftMotorLogicPin2, pwmDutyCycle);
      analogWrite(rightMotorLogicPin1, 0);
      analogWrite(rightMotorLogicPin2, pwmDutyCycle);
    }
  if (currentDirection == 'r') {
    Serial.println("Reverse");
    analogWrite(leftMotorLogicPin1, pwmDutyCycle);
    analogWrite(leftMotorLogicPin2, 0);
    analogWrite(rightMotorLogicPin1, pwmDutyCycle);
    analogWrite(rightMotorLogicPin2, 0);
  }
}

// -------------------------------------------------------
// Function: Returns distance based on readings from Ultrasonic
// -------------------------------------------------------
long readUltrasonic(){
  // Copied from Lecture Notes (Week2) - Scans using the HC SR04 ultrasonic sensor 
  unsigned long clockStart;
  unsigned long clockMax;
  unsigned long timeMax = 60000;
  float distance;
  
  // Send the 10 usec trigger pulse
  digitalWrite(sensorTrigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(sensorTrigPin, LOW);
  
  // Once triggered it take about 500 usec for the echo pin to go high
  // Set the max wait time
  clockMax = micros() + 1000;

  // Wait for the echo pin to go high
  while ((micros() < clockMax) && (digitalRead(sensorEchoPin) == LOW));
  
  // Initialise the echo timer
  clockStart = micros();
  clockMax = clockStart + timeMax;

  // Read the sensor delay time by waiting for the echo pin to go low
  while ((micros() < clockMax) && (digitalRead(sensorEchoPin) == HIGH));
  
  // Calculate the distance in cm
  distance = float(micros() - clockStart) / 58.0;
  return distance;
}

// -------------------------------------------------------
// The setup() method runs once, when the sketch starts
// -------------------------------------------------------
void setup(){ 
 
  // Initialize the serial communications
  Serial.begin(9600);

  // Print the program details
  Serial.println("-------------------------------------");
  Serial.println("Program: ACD"); 
  Serial.println("Initializing ...");
  
  // Call a subroutine to initialize the motor pins
  initializeMotorPins();
  initializeSensorPins();

  // Initialization completed successfully
  Serial.println("Initialization complete");
  
}

// -------------------------------------------------------
// The loop() method runs over and over again
// -------------------------------------------------------
void loop(){
  int IRSensorStatus = digitalRead(IRSensorPin);
  distance = readUltrasonic();

  // Obstacle Detection
  if (distance <= reverseDistance) {
    setMotorPins('f', 0); // Stop
    setMotorPins('r', 102); // Reversing speed = 40%
    Serial.println("Vehicle reversing!");
  } else if (distance <= stoppingDistance) {
    setMotorPins('f', 0); // Stop
    Serial.println("Vehicle stopping!");
  } else {
    setMotorPins('f', 128); // Go, speed = 50%
    Serial.println("Vehicle moving forward!");
  }

  // Container detection
  if (IRSensorStatus == 1) { // Check if the pin high or not
    // if the pin is high turn off the onboard Led
    digitalWrite(LEDPin, LOW); // LED LOW
    // SUCKY SUCK MOTION
  } else {
    //else turn on the onboard LED
    digitalWrite(LEDPin, HIGH); // LED High
  }
  delay(200);
}
